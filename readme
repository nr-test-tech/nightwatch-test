To run selenium webdriver in Chrome browser, we need to take the help of ChromeDriver which is a 
separate executable that selenium webdriver uses to control chrome. 
ChromeDriver is a standalone server which implements WebDriver's wire protocol for Chromium.

Steps
1. Install Java and set path in environment veriable 
2. Create a lib folder in root directory => Download selenium-server-standalone-3.141.59.jar 
      and chromedriver.exe and place both inside lib folder(here it is externally we can install through npm also).
3. npm install nightwatch 
4. npm init --yes => this will create package.json
5. create nightwatch.conf.js file in root folder 
6. configure nightwatch.conf.js file with selenium and chromedriver details
7. require('nightwatch/bin/runner.js')in nightwatch.js file; 
      this will allow Selenium Server is running locally and is managed by Nightwatch
8. create test.js file to write testcases.
9. execute file in node => node nightwatch.js -e tests/test1.js
 
 1st time Git setup :
 1.  git download and install
 2.  Open the command line/terminal.
            Set your username: git config --global user.name "FIRST_NAME LAST_NAME"
            Set your email address: git config --global user.email "MY_NAME@example.com"
                  => to check settings =>git config --list
 3.  git add . 
 4.  git status
 5.  create new branch and switch to it (bydefault on master) => git checkout -b nightwatchExample 
         git commit -m "first commit"  
         git status  
         git remote add origin https://github.com/path-to-repository
         git push -u origin master-or-anybranch
         //git remote set-url origin https://github.com/***repository link***(this is used to change URL)

         Note : 
         1. origin: the default name that git gives to your main remote repository
         2. HEAD is a pointer/label to the most recent commit of the branch you are currently on.
                  HEAD is a reference to the last commit in the currently check-out branch. 
                  You can think of the HEAD as the "current branch". 
                  When you switch branches with git checkout, 
                  the HEAD revision changes to point to the tip of the new branch. 
                  You can see what HEAD points to by doing: cat .git/HEAD. 
         3. master is the default branch created when you initialized a git repository (e.g. git init ). 
         4. You can delete the master branch (e.g. git branch -D master ). 
         5. You cannot delete the HEAD pointer. 